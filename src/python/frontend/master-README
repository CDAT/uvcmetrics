There are three sections to each master dictionary file.
The first section (diags_collection) is used to define the diagnostics collections.
Each collection starts with an empty dictionary, then has a few basic parameters -
1) desc - a brief (1 or 2 sentences) description of the plot, used to generate an index page
2) preamble - a longer description of the set. used as the introduction before plot links in the classic viewer
       preamble is assumed empty if nothing is provided.

After that, additional optional arguments that encompass the entire collection can be specified. The additional arguments are:
seasons - a collection-level set of seasons. all variables in the collection will iterate over this list of seasons. 
          if this is not specified the code will look for seasons in individual variable definitions.
          if no seasons are found in individual variable definitions ANN is assumed
regions - a collection-level set of regions. all variables in the collection will iterate over this list of regions.
          if this is not specified, the code will look for regions in individual variable definitions.
          if not regions are found in individual variable definitions, Global is assumed
package - a collection-level indicate of what package the plots are from. e.g. AMWG or LMWG
          if this is not specified, the code will look for packages in individual variable definitions.
          No assumptions are made on package. It must be collection-defined or all variables need to define it
options - A dictionary of options specific to the collection. These are passed as command line options to diags.py
          The current primary one is:
          'logo':'no' - does not draw the UVCDAT logo on output plots.
          'requirestwosets':'yes' - this set requires 2+ datasets to be enabled.
executeable - A string containing an alternative executable name (i.e. instead of running diags.py, run {script})
          This requires extra work in metadiags.py to support but there are examples there.
Collection-level Flags:
          combined:True - indicates this collection produces combined single image plots which are model, 
             then obs, then model-obs. This helps classic viewer. 
             Note: This is only for plots that want the 3-pane view. If obs and model data are 
             combined on the plot as plot production (e.g. set amwg 10) you don't need to set this.
          imagesonly:True - indicates that metadiags.py should not try to generate this collection; rather, it is
             generated 'externally' and meant to be displayed by classic viewer. 
          tables:True - indicates that this collection is just numeric tables. This is useful because tables are
             slightly special cased in both metadiags and classic viewer.
          mixed_plots:Basically, any collection that is NOT part of the original NCAR lmwg/amwg package, even if it is
             just a single type of plot. 
          parallel: Set to true if this collection supports being run in parallel. mostly impacts MPI-metadiags.

Once any optional additional arguments have been specified, the variables that make up the set are defined.
A typical variable entry has the variable name (as found in the obs sets and model output) as a key, then a plottype, a list of observation sets, and optional paraemeters.
Optional parameters include a list of seasons, regions, and variable options, and anything else specific to a variable
All arguments (except plot type) are lists. Here is a complicated example:

diags_collection['example']['Z3'] = {'plottype': '10', 'obs': ['ECMWF_1', 'NCEP_1', 'JRA25_1', 'ERA40_1'], 'varopts':['300', '500'], 'regions':['Global', 'Tropics'], 'seasons':['ANN', 'DJF']}
This would create a total of 4*2*2*2 plots (each obs set, each pressure level, each region, and each season).
metadiags attempts to group as many of these together as possible for efficient IO
A much simpler minimal example would just be:
diags_collection['example']['T'] = {'plottype': '5', 'obs':['ECMWF_1']}

The second part of the file is a list of variables.
A typical entry looks like:
diags_varlist['TREFHT'] = {'desc': '2-meter temperature (land) (Northern)'}
This is primarily used in web-page creation to have a description for a given variable.
Eventually, other metadata about a variable might be included. Note: This section is primarily required
because of the lack of consistency in CF-compliance in data sets and observation sets.

The third part of the file is a list of observatino sets.
A typical entry looks like:
diags_obslist['HADISST_PD_1'] = {'filekey': 'HADISST_PD', 'desc': 'HadISST/OI.v2 (Present Day) 1999-2008'}
This converts the obs set keys specified in the collections sections to a filename key (ie, HADISST_PD* has the data we need)
and a description (again for web page generation)
